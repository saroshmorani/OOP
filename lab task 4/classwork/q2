#include <iostream>
#include <cmath>
#include <algorithm>

class Polynomial {
private:
    double* coefficients;
    int degree;

public:
    Polynomial() : degree(0) {
        coefficients = new double[1]{0};
    }

    // parameterized constructor
    Polynomial(int deg, const double* coeffs) : degree(deg) {
        coefficients = new double[degree + 1];
        for (int i = 0; i <= degree; ++i) {
            coefficients[i] = coeffs[i];
        }
    }

    // copy constructor
    Polynomial(const Polynomial& other) : degree(other.degree) {
        coefficients = new double[degree + 1];
        for (int i = 0; i <= degree; ++i) {
            coefficients[i] = other.coefficients[i];
        }
    }

    // move constructor
    Polynomial(Polynomial&& other) noexcept : degree(other.degree), coefficients(other.coefficients) {
        other.coefficients = nullptr;
        other.degree = 0;
    }

    // destructor
    ~Polynomial() {
        delete[] coefficients;
    }


    int getDegree() const {
        return degree;
    }

    double evaluate(double x) const {
        double result = 0;
        for (int i = 0; i <= degree; ++i) {
            result += coefficients[i] * std::pow(x, i);
        }
        return result;
    }

    Polynomial add(const Polynomial& other) const {
        int maxDegree = std::max(degree, other.degree);
        double* newCoeffs = new double[maxDegree + 1]{};

        for (int i = 0; i <= degree; ++i) {
            newCoeffs[i] += coefficients[i];
        }
        for (int i = 0; i <= other.degree; ++i) {
            newCoeffs[i] += other.coefficients[i];
        }

        return Polynomial(maxDegree, newCoeffs);
    }

    Polynomial multiply(const Polynomial& other) const {
        int newDegree = degree + other.degree;
        double* newCoeffs = new double[newDegree + 1]{};

        for (int i = 0; i <= degree; ++i) {
            for (int j = 0; j <= other.degree; ++j) {
                newCoeffs[i + j] += coefficients[i] * other.coefficients[j];
            }
        }

        return Polynomial(newDegree, newCoeffs);
    }

    // Display polynomial
    void display() const {
        for (int i = degree; i >= 0; --i) {
            std::cout << coefficients[i] << "x^" << i;
            if (i > 0) std::cout << " + ";
        }
        std::cout << std::endl;
    }
};

int main(int argc, char* argv[]) {
    if (argc < 7) {
        std::cerr << "Usage: " << argv[0] << " deg1 c0 c1 ... deg2 c0 c1 ..." << std::endl;
        return 1;
    }

    int deg1 = std::stoi(argv[1]);
    double* coeffs1 = new double[deg1 + 1];
    for (int i = 0; i <= deg1; ++i) {
        coeffs1[i] = std::stod(argv[i + 2]);
    }

    int deg2 = std::stoi(argv[deg1 + 3]);
    double* coeffs2 = new double[deg2 + 1];
    for (int i = 0; i <= deg2; ++i) {
        coeffs2[i] = std::stod(argv[i + deg1 + 4]);
    }

    Polynomial p1(deg1, coeffs1);
    Polynomial p2(deg2, coeffs2);

    delete[] coeffs1;
    delete[] coeffs2;

    std::cout << "Polynomial 1: ";
    p1.display();
    std::cout << "Polynomial 2: ";
    p2.display();

    Polynomial sum = p1.add(p2);
    std::cout << "Sum: ";
    sum.display();

    Polynomial product = p1.multiply(p2);
    std::cout << "Product: ";
    product.display();

    std::cout << "Evaluation of p1 at x=2: " << p1.evaluate(2) << std::endl;
    return 0;
}
